## 1 Creating/Linking Route

- "App.js"
  => Implemented { Route, Switch } Created Routes

- Crated Route Components
  => "AllQuote.js"
  => "NewQuote.js"
  => "QuoteDetail.js"

- "index.js"
  => { BrowserRouter } to Connect/Activate Routes of "App.js"

////////////////////////////////////////////////////////////////////////////////////////////

## 2 Redirecting Route, Extracting Params

- "App.js"
  => implemented { Redirect } to redirect default/main page

- "QuoteDetail.js"
  => implemented { useParams } to Extract Params from "Route URL"

////////////////////////////////////////////////////////////////////////////////////////////

## 3 Nesting Routes

- "QuoteDetail.js"
  => { Route } to add nested <Route path={`/quotes/${params.quoteId}/comments`}>
  => Using `${Template Literal}` to add params + aditional /Route to the URL
  => Or Alternative => <Route path="/quotes/:quoteId/comments">

////////////////////////////////////////////////////////////////////////////////////////////

## 4 Adding a Layout Wrapper Component

- "MainNavigation.js"
  => Navigation Bar
  => { NavLink } to create links for the Routes

- "Layout.js"
  => Layoput Module to wrapp around "App.js" JSX

////////////////////////////////////////////////////////////////////////////////////////////

## 5 Adding Dummy Data & More Content

- "AllQuotes.js"
  => Added "DUMMY_QUOTES"
  => imported "QuoteList.js" To display Data

- "NewQuote.js"
  => Added Quote Form
  => import "QuoteForm.js" to rended quote form, & pass "addQuoteHandler()" to <QuoteForm>

////////////////////////////////////////////////////////////////////////////////////////////

## 6 Outputting Data on "Details Page"

- "QuoteItem.js"
  => used { Link } to handle "View Fullscreen" button <Link className="btn" to={`/quotes/${props.id}`}>

- "QuoteDetail.js"
  => Added DUMMY_DATA, Find quote by Id, return if (!id)

////////////////////////////////////////////////////////////////////////////////////////////

## 7 Adding a "Not Found" Page

- "NotFound.js"
  => Route module created

- "App.js"
  => using { Route } to display "Not Found" Page
  => <Route path="*"> (any other page)

////////////////////////////////////////////////////////////////////////////////////////////

## 8 Implementing Programmatic (Imperative) Navigation

- "NewQuote.js"
  => implemented { useHistory } to navigate route back/away on "Submit"

--------------------------------------------------------- import { useHistory } from "react-router-dom";
to navigate away on "event"

- ".push" => erases history and creates a new Route with changes (No go back button)
- ".replace" => replace history Route with changes (Can use go back button)

////////////////////////////////////////////////////////////////////////////////////////////

## 9 Preventing Unwanted Route Transitions with "propt" Component

- "QuoteForm.js"
  => Implemented { Prompt } to show prompt/message when form losses focus "onFocus={}"
  => { useState } to toggle { Prompt }

--------------------------------------------------------- import { Prompt } from "react-router-dom";
to alert/prompt message
<Prompt when={true/false} message(() => 'MessageHere') />

////////////////////////////////////////////////////////////////////////////////////////////

## 10 Working with Query Parameters

- "QuoteList.js"
  => using { useHistory } to add query params in URL '?sort='
  => using { useLocation } to get router data then (extract query param)

--------------------------------------------------------- import { useLocation } from "react-router-dom";
Get current Router Data/Details

--------------------------------------------------------- new URLSearchParams()
Get Params (JS Method)

////////////////////////////////////////////////////////////////////////////////////////////

## 11 Getting Creative with Nesting Routes

- "QuoteDetail.js"
  => Nesting a { Link } inside a { Route } for the comments
  => <Route path={`/quotes/${params.quoteId}`} exact> <Link to={`/quotes/${params.quoteId}/comments`} /> </Route>

////////////////////////////////////////////////////////////////////////////////////////////

## 12 Writting Frexible Routing Code

- "QuoteDetail.js"
  => added { useRouteMatch } to get "URL from data" to avoid hard coding Routes

- "QuoteList.js"
  => using { useLocation } to replace hard coding routes
  => using alternative way ".push({ pathname:, search: })"

---------------------------------------------------------- import { useRouteMatch } from "react-router-dom";
Get Total Router/URL DATA

////////////////////////////////////////////////////////////////////////////////////////////

## 13 Sending & Getting Quote Data via HTTP

- Added
  => "./hooks/use-http.js" => (Custom Hook) contain Reducers
  => "./lib/api.js" => (API Functionality for FIREBASE)

- "NewQuote.js"
  => Added/Implemented Custom Hook & API request
  => Sending & Storing Data to API

- "AllQuotes.js"
  => Added/Implemented Custom Hook & API request (To get All Data)
  => Handling Loading Spinner/ErrorMessage based on API request Status

- "NoQuotesFound.js"
  => { Link } To redirect to Quote Form Route Component

- "QuoteDetail.js"
  => Using Custom Hook, API Request Component (To get quote details)
  => Hanbdling Status from Custom Hook

////////////////////////////////////////////////////////////////////////////////////////////

## 14 Adding the "Comments" Features

- "NewCommentForm.js"
  => Implemented "Comments" feature with our "API Component & Custom Hook"
  => { useRef } to get Commend data from JSX and sent to API
  => { useEffect } to do something else after "successfully" API request

- "Comments.js"
  => Using "API Component & Custom Hook" to get all Comments
  => { useParams } To get "quoteId"
  => Created Function for "NewCommentForm.js" on "Success" API request

////////////////////////////////////////////////////////////////////////////////////////////

## 15 Lazy Loading (Loading code only when is needed)

- "App.js"
  => Implemented "React.lazy()" (To import Component that will only load when is called)
  => { Suspense } To connect "React.lazy()" component to the JSX
  => <Suspense fallback={}> => What to do/show before finish loading

------------------------------------------------ React.lazy(() => import("./componentLocation"))
To import a component that will only starts to load when is Called

------------------------------------------------ { Suspense }
To Connect "React.lazy()" to the JSX
